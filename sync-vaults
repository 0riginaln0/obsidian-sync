#!/usr/bin/env python3

import subprocess
import sys
import threading
import time
import itertools


def sync(source, destination):
    return subprocess.run(
        ["rclone", "sync", source, destination],
        capture_output=True,
        timeout=2 * 60,
    )


def print_usage():
    print(
        """
Usage:
    for getting changes from the google drive:
        sync-vaults pull
    for submitting changes to google drive:
        sync-vaults push
    for knowing version:
        sync-vaults version
"""
    )


running = False


def spinner():
    """Display a loading spinner while the command is running."""
    for c in itertools.cycle(["|", "/", "-", "\\"]):
        if not running:
            break
        print(f"\rLoading... {c}", end="", flush=True)
        time.sleep(0.1)


def run_sync_subprocess(sync_subprocess):
    global running
    running = True
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()
    result = sync_subprocess()
    running = False
    spinner_thread.join()
    print("\rDone!")  # Clear the spinner line
    print(result)


local_folder = "/home/ryzh/Downloads/Programs/Obsidian/Vaults"
remote_folder = "Vaults"
conn = "Drive:"


def handle_command(command):
    match command:
        case "push":
            print("Running push command")
            run_sync_subprocess(lambda: sync(local_folder, conn + remote_folder))
        case "pull":
            print("Running pull command")
            run_sync_subprocess(lambda: sync(conn + remote_folder, local_folder))
        case "version":
            print("Syncing Vaults v2.2")
        case _:
            print_usage()


print("Hello from Syncing Vaults!")

args = sys.argv
match len(args):
    case 2:
        handle_command(args[1])
    case _:
        print_usage()
