#!/usr/bin/env python3

import subprocess
import sys
from threading import Event, Thread
import time
import itertools


def spin_around(sync_subprocess):
    def wrapper(*args, **kwargs):
        def spinner_goes_brrrrrrrr(stop: Event):
            for c in itertools.cycle(["|", "/", "-", "\\"]):
                if stop.is_set():
                    break
                print(f"\rLoading... {c}", end="", flush=True)
                time.sleep(0.1)

        stop = Event()
        spinner = Thread(target=spinner_goes_brrrrrrrr, args=(stop,))
        spinner.start()
        result = sync_subprocess(*args, **kwargs)
        stop.set()
        spinner.join()
        print("\rDone!       ")
        print(result)

    return wrapper


@spin_around
def sync(source, destination):
    """Run `rclone sync <source> <destination>` command with passed `source` and `destination` parameters"""
    print(f"\r    rclone sync {source} {destination}")
    return subprocess.run(
        args=["rclone", "sync", source, destination],
        capture_output=True,
        timeout=2 * 60,
    )


def print_usage():
    print(
        """
Usage:
    for getting changes from the google drive:
        sync-vaults pull
    for submitting changes to google drive:
        sync-vaults push
    for knowing version:
        sync-vaults version
"""
    )


local_folder = "/home/ryzh/Downloads/Programs/Obsidian/Vaults"
remote_folder = "Vaults"
conn = "Drive:"


def handle_command(command):
    match command:
        case "push":
            print("Running push command")
            sync(local_folder, conn + remote_folder)
        case "pull":
            print("Running pull command")
            sync(conn + remote_folder, local_folder)
        case "version":
            print("Syncing Vaults v2.3")
        case _:
            print_usage()


args = sys.argv
match len(args):
    case 2:
        handle_command(args[1])
    case _:
        print_usage()
